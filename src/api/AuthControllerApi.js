/**
 * Saque e Pague Sonda
 * Modelo de API para o serviço de sonda da Saque e Pague. Parceiro pode requisitar o último estado de uma transação (cancelada, confirmada ou pendente) através das chamadas desta API. Caso não encontre a transação, o serviço retorna o estado pendente.
 *
 * OpenAPI spec version: 1.1.1-sw2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthResp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthResp'));
  } else {
    // Browser globals (root is window)
    if (!root.SaqueEPagueSonda) {
      root.SaqueEPagueSonda = {};
    }
    root.SaqueEPagueSonda.AuthControllerApi = factory(root.SaqueEPagueSonda.ApiClient, root.SaqueEPagueSonda.AuthResp);
  }
}(this, function(ApiClient, AuthResp) {
  'use strict';

  /**
   * AuthController service.
   * @module api/AuthControllerApi
   * @version 1.1.1-sw2
   */

  /**
   * Constructs a new AuthControllerApi. 
   * @alias module:api/AuthControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the saqueepagueOauthTokenPost operation.
     * @callback module:api/AuthControllerApi~saqueepagueOauthTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retorna o token de autenticação do serviço.
     * Autentica o usuário e gera um token para a requisição de sonda.
     * @param {String} grantType Constante passada para este tipo de autenticação: password.
     * @param {String} password Senha disponibilizada pela SEP.
     * @param {String} username Usuário disponibilizado pela SEP.
     * @param {module:api/AuthControllerApi~saqueepagueOauthTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResp}
     */
    this.saqueepagueOauthTokenPost = function(grantType, password, username, callback) {
      var postBody = null;

      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling saqueepagueOauthTokenPost");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling saqueepagueOauthTokenPost");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling saqueepagueOauthTokenPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'grant_type': grantType,
        'password': password,
        'username': username
      };

      var authNames = ['BasicAuth'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = AuthResp;

      return this.apiClient.callApi(
        '/saqueepague/oauth/token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
